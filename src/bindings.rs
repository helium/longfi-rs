/* automatically generated by rust-bindgen 0.55.1 */

pub const true_: u32 = 1;
pub const false_: u32 = 0;
pub const __bool_true_false_are_defined: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __DARWIN_ONLY_64_BIT_INO_T: u32 = 0;
pub const __DARWIN_ONLY_VERS_1050: u32 = 0;
pub const __DARWIN_ONLY_UNIX_CONFORMANCE: u32 = 1;
pub const __DARWIN_UNIX03: u32 = 1;
pub const __DARWIN_64_BIT_INO_T: u32 = 1;
pub const __DARWIN_VERS_1050: u32 = 1;
pub const __DARWIN_NON_CANCELABLE: u32 = 0;
pub const __DARWIN_SUF_64_BIT_INO_T: &'static [u8; 9usize] = b"$INODE64\0";
pub const __DARWIN_SUF_1050: &'static [u8; 6usize] = b"$1050\0";
pub const __DARWIN_SUF_EXTSN: &'static [u8; 14usize] = b"$DARWIN_EXTSN\0";
pub const __DARWIN_C_ANSI: u32 = 4096;
pub const __DARWIN_C_FULL: u32 = 900000;
pub const __DARWIN_C_LEVEL: u32 = 900000;
pub const __STDC_WANT_LIB_EXT1__: u32 = 1;
pub const __DARWIN_NO_LONG_LONG: u32 = 0;
pub const _DARWIN_FEATURE_64_BIT_INODE: u32 = 1;
pub const _DARWIN_FEATURE_ONLY_UNIX_CONFORMANCE: u32 = 1;
pub const _DARWIN_FEATURE_UNIX_CONFORMANCE: u32 = 3;
pub const __PTHREAD_SIZE__: u32 = 8176;
pub const __PTHREAD_ATTR_SIZE__: u32 = 56;
pub const __PTHREAD_MUTEXATTR_SIZE__: u32 = 8;
pub const __PTHREAD_MUTEX_SIZE__: u32 = 56;
pub const __PTHREAD_CONDATTR_SIZE__: u32 = 8;
pub const __PTHREAD_COND_SIZE__: u32 = 40;
pub const __PTHREAD_ONCE_SIZE__: u32 = 8;
pub const __PTHREAD_RWLOCK_SIZE__: u32 = 192;
pub const __PTHREAD_RWLOCKATTR_SIZE__: u32 = 16;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const INT64_MAX: u64 = 9223372036854775807;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT64_MIN: i64 = -9223372036854775808;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const UINT64_MAX: i32 = -1;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST64_MIN: i64 = -9223372036854775808;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const INT_LEAST64_MAX: u64 = 9223372036854775807;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const UINT_LEAST64_MAX: i32 = -1;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i32 = -32768;
pub const INT_FAST32_MIN: i32 = -2147483648;
pub const INT_FAST64_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u32 = 32767;
pub const INT_FAST32_MAX: u32 = 2147483647;
pub const INT_FAST64_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: u32 = 65535;
pub const UINT_FAST32_MAX: u32 = 4294967295;
pub const UINT_FAST64_MAX: i32 = -1;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const UINTPTR_MAX: i32 = -1;
pub const SIZE_MAX: i32 = -1;
pub const RSIZE_MAX: i32 = -1;
pub const WINT_MIN: i32 = -2147483648;
pub const WINT_MAX: u32 = 2147483647;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub type size_t = ::std::os::raw::c_ulong;
pub type wchar_t = ::std::os::raw::c_int;
pub type max_align_t = u128;
pub type int_least8_t = i8;
pub type int_least16_t = i16;
pub type int_least32_t = i32;
pub type int_least64_t = i64;
pub type uint_least8_t = u8;
pub type uint_least16_t = u16;
pub type uint_least32_t = u32;
pub type uint_least64_t = u64;
pub type int_fast8_t = i8;
pub type int_fast16_t = i16;
pub type int_fast32_t = i32;
pub type int_fast64_t = i64;
pub type uint_fast8_t = u8;
pub type uint_fast16_t = u16;
pub type uint_fast32_t = u32;
pub type uint_fast64_t = u64;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_longlong;
pub type __uint64_t = ::std::os::raw::c_ulonglong;
pub type __darwin_intptr_t = ::std::os::raw::c_long;
pub type __darwin_natural_t = ::std::os::raw::c_uint;
pub type __darwin_ct_rune_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __mbstate_t {
    pub __mbstate8: [::std::os::raw::c_char; 128usize],
    pub _mbstateL: ::std::os::raw::c_longlong,
    _bindgen_union_align: [u64; 16usize],
}
#[test]
fn bindgen_test_layout___mbstate_t() {
    assert_eq!(
        ::std::mem::size_of::<__mbstate_t>(),
        128usize,
        concat!("Size of: ", stringify!(__mbstate_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__mbstate_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__mbstate_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__mbstate_t>())).__mbstate8 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t),
            "::",
            stringify!(__mbstate8)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__mbstate_t>()))._mbstateL as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t),
            "::",
            stringify!(_mbstateL)
        )
    );
}
pub type __darwin_mbstate_t = __mbstate_t;
pub type __darwin_ptrdiff_t = ::std::os::raw::c_long;
pub type __darwin_size_t = ::std::os::raw::c_ulong;
pub type __darwin_va_list = __builtin_va_list;
pub type __darwin_wchar_t = ::std::os::raw::c_int;
pub type __darwin_rune_t = __darwin_wchar_t;
pub type __darwin_wint_t = ::std::os::raw::c_int;
pub type __darwin_clock_t = ::std::os::raw::c_ulong;
pub type __darwin_socklen_t = __uint32_t;
pub type __darwin_ssize_t = ::std::os::raw::c_long;
pub type __darwin_time_t = ::std::os::raw::c_long;
pub type __darwin_blkcnt_t = __int64_t;
pub type __darwin_blksize_t = __int32_t;
pub type __darwin_dev_t = __int32_t;
pub type __darwin_fsblkcnt_t = ::std::os::raw::c_uint;
pub type __darwin_fsfilcnt_t = ::std::os::raw::c_uint;
pub type __darwin_gid_t = __uint32_t;
pub type __darwin_id_t = __uint32_t;
pub type __darwin_ino64_t = __uint64_t;
pub type __darwin_ino_t = __darwin_ino64_t;
pub type __darwin_mach_port_name_t = __darwin_natural_t;
pub type __darwin_mach_port_t = __darwin_mach_port_name_t;
pub type __darwin_mode_t = __uint16_t;
pub type __darwin_off_t = __int64_t;
pub type __darwin_pid_t = __int32_t;
pub type __darwin_sigset_t = __uint32_t;
pub type __darwin_suseconds_t = __int32_t;
pub type __darwin_uid_t = __uint32_t;
pub type __darwin_useconds_t = __uint32_t;
pub type __darwin_uuid_t = [::std::os::raw::c_uchar; 16usize];
pub type __darwin_uuid_string_t = [::std::os::raw::c_char; 37usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_pthread_handler_rec {
    pub __routine: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    pub __arg: *mut ::std::os::raw::c_void,
    pub __next: *mut __darwin_pthread_handler_rec,
}
#[test]
fn bindgen_test_layout___darwin_pthread_handler_rec() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_pthread_handler_rec>(),
        24usize,
        concat!("Size of: ", stringify!(__darwin_pthread_handler_rec))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_pthread_handler_rec>(),
        8usize,
        concat!("Alignment of ", stringify!(__darwin_pthread_handler_rec))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_pthread_handler_rec>())).__routine as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_pthread_handler_rec),
            "::",
            stringify!(__routine)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_pthread_handler_rec>())).__arg as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_pthread_handler_rec),
            "::",
            stringify!(__arg)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_pthread_handler_rec>())).__next as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_pthread_handler_rec),
            "::",
            stringify!(__next)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _opaque_pthread_attr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 56usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_attr_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_attr_t>(),
        64usize,
        concat!("Size of: ", stringify!(_opaque_pthread_attr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_attr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_attr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_opaque_pthread_attr_t>())).__sig as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_attr_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_opaque_pthread_attr_t>())).__opaque as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_attr_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _opaque_pthread_cond_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 40usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_cond_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_cond_t>(),
        48usize,
        concat!("Size of: ", stringify!(_opaque_pthread_cond_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_cond_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_cond_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_opaque_pthread_cond_t>())).__sig as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_cond_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_opaque_pthread_cond_t>())).__opaque as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_cond_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_condattr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 8usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_condattr_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_condattr_t>(),
        16usize,
        concat!("Size of: ", stringify!(_opaque_pthread_condattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_condattr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_condattr_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_opaque_pthread_condattr_t>())).__sig as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_condattr_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_opaque_pthread_condattr_t>())).__opaque as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_condattr_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _opaque_pthread_mutex_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 56usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_mutex_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_mutex_t>(),
        64usize,
        concat!("Size of: ", stringify!(_opaque_pthread_mutex_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_mutex_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_mutex_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_opaque_pthread_mutex_t>())).__sig as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_mutex_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_opaque_pthread_mutex_t>())).__opaque as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_mutex_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_mutexattr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 8usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_mutexattr_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_mutexattr_t>(),
        16usize,
        concat!("Size of: ", stringify!(_opaque_pthread_mutexattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_mutexattr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_mutexattr_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_opaque_pthread_mutexattr_t>())).__sig as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_mutexattr_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_opaque_pthread_mutexattr_t>())).__opaque as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_mutexattr_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_once_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 8usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_once_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_once_t>(),
        16usize,
        concat!("Size of: ", stringify!(_opaque_pthread_once_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_once_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_once_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_opaque_pthread_once_t>())).__sig as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_once_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_opaque_pthread_once_t>())).__opaque as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_once_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _opaque_pthread_rwlock_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 192usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_rwlock_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_rwlock_t>(),
        200usize,
        concat!("Size of: ", stringify!(_opaque_pthread_rwlock_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_rwlock_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_rwlock_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_opaque_pthread_rwlock_t>())).__sig as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_rwlock_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_opaque_pthread_rwlock_t>())).__opaque as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_rwlock_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_rwlockattr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 16usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_rwlockattr_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_rwlockattr_t>(),
        24usize,
        concat!("Size of: ", stringify!(_opaque_pthread_rwlockattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_rwlockattr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_rwlockattr_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_opaque_pthread_rwlockattr_t>())).__sig as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_rwlockattr_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_opaque_pthread_rwlockattr_t>())).__opaque as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_rwlockattr_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _opaque_pthread_t {
    pub __sig: ::std::os::raw::c_long,
    pub __cleanup_stack: *mut __darwin_pthread_handler_rec,
    pub __opaque: [::std::os::raw::c_char; 8176usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_t>(),
        8192usize,
        concat!("Size of: ", stringify!(_opaque_pthread_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_opaque_pthread_t>())).__sig as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_opaque_pthread_t>())).__cleanup_stack as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_t),
            "::",
            stringify!(__cleanup_stack)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_opaque_pthread_t>())).__opaque as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_t),
            "::",
            stringify!(__opaque)
        )
    );
}
pub type __darwin_pthread_attr_t = _opaque_pthread_attr_t;
pub type __darwin_pthread_cond_t = _opaque_pthread_cond_t;
pub type __darwin_pthread_condattr_t = _opaque_pthread_condattr_t;
pub type __darwin_pthread_key_t = ::std::os::raw::c_ulong;
pub type __darwin_pthread_mutex_t = _opaque_pthread_mutex_t;
pub type __darwin_pthread_mutexattr_t = _opaque_pthread_mutexattr_t;
pub type __darwin_pthread_once_t = _opaque_pthread_once_t;
pub type __darwin_pthread_rwlock_t = _opaque_pthread_rwlock_t;
pub type __darwin_pthread_rwlockattr_t = _opaque_pthread_rwlockattr_t;
pub type __darwin_pthread_t = *mut _opaque_pthread_t;
pub type u_int8_t = ::std::os::raw::c_uchar;
pub type u_int16_t = ::std::os::raw::c_ushort;
pub type u_int32_t = ::std::os::raw::c_uint;
pub type u_int64_t = ::std::os::raw::c_ulonglong;
pub type register_t = i64;
pub type user_addr_t = u_int64_t;
pub type user_size_t = u_int64_t;
pub type user_ssize_t = i64;
pub type user_long_t = i64;
pub type user_ulong_t = u_int64_t;
pub type user_time_t = i64;
pub type user_off_t = i64;
pub type syscall_arg_t = u_int64_t;
pub type intmax_t = ::std::os::raw::c_long;
pub type uintmax_t = ::std::os::raw::c_ulong;
#[doc = " Max supported datagram payload length."]
pub const LFC_DG_CONSTANTS_LFC_DG_CONSTANTS_MAX_PAY_LEN: LFC_DG_CONSTANTS = 128;
#[doc = " Constants"]
pub type LFC_DG_CONSTANTS = ::std::os::raw::c_uint;
#[doc = " Monolithic."]
pub const lfc_dg_type_lfc_dg_type_monolithic: lfc_dg_type = 1;
#[doc = " Start of Frame."]
pub const lfc_dg_type_lfc_dg_type_frame_start: lfc_dg_type = 2;
#[doc = " Frame Data."]
pub const lfc_dg_type_lfc_dg_type_frame_data: lfc_dg_type = 3;
#[doc = " Ack."]
pub const lfc_dg_type_lfc_dg_type_ack: lfc_dg_type = 4;
#[doc = " The type (or variant) of datagram."]
pub type lfc_dg_type = ::std::os::raw::c_uint;
#[doc = " The result of parsing the golay-encoded header."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lfc_dg_hdr {
    #[doc = " Number of corrected bit errors."]
    pub bit_errs: ::std::os::raw::c_int,
    #[doc = " Unparsed flags bits."]
    pub flag_bits: u8,
    #[doc = " This datagram's type"]
    pub type_: lfc_dg_type,
}
#[test]
fn bindgen_test_layout_lfc_dg_hdr() {
    assert_eq!(
        ::std::mem::size_of::<lfc_dg_hdr>(),
        12usize,
        concat!("Size of: ", stringify!(lfc_dg_hdr))
    );
    assert_eq!(
        ::std::mem::align_of::<lfc_dg_hdr>(),
        4usize,
        concat!("Alignment of ", stringify!(lfc_dg_hdr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lfc_dg_hdr>())).bit_errs as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(lfc_dg_hdr),
            "::",
            stringify!(bit_errs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lfc_dg_hdr>())).flag_bits as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(lfc_dg_hdr),
            "::",
            stringify!(flag_bits)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lfc_dg_hdr>())).type_ as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(lfc_dg_hdr),
            "::",
            stringify!(type_)
        )
    );
}
#[doc = " Monolithic."]
#[doc = ""]
#[doc = " A Monolithic Datagram is expected to be the most common way to"]
#[doc = " transmit data that can fit within a single Datagram. When sending"]
#[doc = " or receiving small amounts of data, a Monolithic Datagram should be"]
#[doc = " used."]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct lfc_dg_monolithic {
    #[doc = "< Flags."]
    pub flags: lfc_dg_monolithic_lfc_dg_monolithic_flags,
    #[doc = " Organization ID."]
    pub oui: u32,
    #[doc = " Device ID."]
    pub did: u32,
    #[doc = " Fingerprint."]
    pub fp: u32,
    #[doc = " Sequence number."]
    pub seq: u32,
    #[doc = " Length (not capacity) of following payload."]
    pub pay_len: size_t,
    #[doc = " Data payload."]
    pub pay: [u8; 128usize],
}
#[doc = " Datagram flags."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lfc_dg_monolithic_lfc_dg_monolithic_flags {
    #[doc = " This packet is destined for a Device if this bit is set."]
    pub downlink: bool,
    #[doc = " The receiver of this packet should acknowledge receipt."]
    pub should_ack: bool,
    #[doc = " On uplink this bit indicates the device is ready to"]
    #[doc = " receive, on downlink it indicates further information"]
    #[doc = " follows."]
    pub cts_rts: bool,
    #[doc = " This indicates to the receiver that the packet is deemed"]
    #[doc = " urgent by the sender and the receiver can choose to act"]
    #[doc = " accordingly."]
    pub priority: bool,
    #[doc = " The packet, beyond the Tag field, is encoded with a Low"]
    #[doc = " Density Parity Code. The specific code used depends on the"]
    #[doc = " maximum datagram size for the current region and spreading"]
    #[doc = " factor."]
    pub ldpc: bool,
}
#[test]
fn bindgen_test_layout_lfc_dg_monolithic_lfc_dg_monolithic_flags() {
    assert_eq!(
        ::std::mem::size_of::<lfc_dg_monolithic_lfc_dg_monolithic_flags>(),
        5usize,
        concat!(
            "Size of: ",
            stringify!(lfc_dg_monolithic_lfc_dg_monolithic_flags)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<lfc_dg_monolithic_lfc_dg_monolithic_flags>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(lfc_dg_monolithic_lfc_dg_monolithic_flags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<lfc_dg_monolithic_lfc_dg_monolithic_flags>())).downlink
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(lfc_dg_monolithic_lfc_dg_monolithic_flags),
            "::",
            stringify!(downlink)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<lfc_dg_monolithic_lfc_dg_monolithic_flags>())).should_ack
                as *const _ as usize
        },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(lfc_dg_monolithic_lfc_dg_monolithic_flags),
            "::",
            stringify!(should_ack)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<lfc_dg_monolithic_lfc_dg_monolithic_flags>())).cts_rts
                as *const _ as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(lfc_dg_monolithic_lfc_dg_monolithic_flags),
            "::",
            stringify!(cts_rts)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<lfc_dg_monolithic_lfc_dg_monolithic_flags>())).priority
                as *const _ as usize
        },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(lfc_dg_monolithic_lfc_dg_monolithic_flags),
            "::",
            stringify!(priority)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<lfc_dg_monolithic_lfc_dg_monolithic_flags>())).ldpc as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(lfc_dg_monolithic_lfc_dg_monolithic_flags),
            "::",
            stringify!(ldpc)
        )
    );
}
#[test]
fn bindgen_test_layout_lfc_dg_monolithic() {
    assert_eq!(
        ::std::mem::size_of::<lfc_dg_monolithic>(),
        160usize,
        concat!("Size of: ", stringify!(lfc_dg_monolithic))
    );
    assert_eq!(
        ::std::mem::align_of::<lfc_dg_monolithic>(),
        8usize,
        concat!("Alignment of ", stringify!(lfc_dg_monolithic))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lfc_dg_monolithic>())).flags as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(lfc_dg_monolithic),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lfc_dg_monolithic>())).oui as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(lfc_dg_monolithic),
            "::",
            stringify!(oui)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lfc_dg_monolithic>())).did as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(lfc_dg_monolithic),
            "::",
            stringify!(did)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lfc_dg_monolithic>())).fp as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(lfc_dg_monolithic),
            "::",
            stringify!(fp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lfc_dg_monolithic>())).seq as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(lfc_dg_monolithic),
            "::",
            stringify!(seq)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lfc_dg_monolithic>())).pay_len as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(lfc_dg_monolithic),
            "::",
            stringify!(pay_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lfc_dg_monolithic>())).pay as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(lfc_dg_monolithic),
            "::",
            stringify!(pay)
        )
    );
}
#[doc = " Start of Frame."]
#[doc = ""]
#[doc = " A Start of Frame Datagram is used to describe a series of following"]
#[doc = " Datagrams that contain a payload larger than a Monolithic Datagram"]
#[doc = " can hold. In some cases, if there's room, some of the payload may"]
#[doc = " appear at the end of this Datagram."]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct lfc_dg_frame_start {
    #[doc = "< Flags."]
    pub flags: lfc_dg_frame_start_lfc_dg_frame_start_flags,
    #[doc = " Organization ID."]
    pub oui: u32,
    #[doc = " Device ID."]
    pub did: u32,
    #[doc = " Fingerprint."]
    pub fp: u32,
    #[doc = " Sequence number."]
    pub seq: u32,
    #[doc = " Fragment count."]
    pub fragments: u32,
    #[doc = " Length (not capacity) of following payload."]
    pub pay_len: size_t,
    #[doc = " Data payload."]
    pub pay: [u8; 128usize],
}
#[doc = " Datagram flags."]
#[doc = ""]
#[doc = " `should_ack` and `cts_rts` should take effect after all the"]
#[doc = " subsequent Frame Data datagrams have been sent."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lfc_dg_frame_start_lfc_dg_frame_start_flags {
    #[doc = " This packet is destined for a Device if this bit is set."]
    pub downlink: bool,
    #[doc = " The receiver of this packet should acknowledge receipt."]
    pub should_ack: bool,
    #[doc = " On uplink this bit indicates the device is ready to"]
    #[doc = " receive, on downlink it indicates further information"]
    #[doc = " follows."]
    pub cts_rts: bool,
    #[doc = " This indicates to the receiver that the packet is deemed"]
    #[doc = " urgent by the sender and the receiver can choose to act"]
    #[doc = " accordingly."]
    pub priority: bool,
    #[doc = " The packet, beyond the Tag field, is encoded with a Low"]
    #[doc = " Density Parity Code. The specific code used depends on the"]
    #[doc = " maximum datagram size for the current region and spreading"]
    #[doc = " factor."]
    pub ldpc: bool,
}
#[test]
fn bindgen_test_layout_lfc_dg_frame_start_lfc_dg_frame_start_flags() {
    assert_eq!(
        ::std::mem::size_of::<lfc_dg_frame_start_lfc_dg_frame_start_flags>(),
        5usize,
        concat!(
            "Size of: ",
            stringify!(lfc_dg_frame_start_lfc_dg_frame_start_flags)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<lfc_dg_frame_start_lfc_dg_frame_start_flags>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(lfc_dg_frame_start_lfc_dg_frame_start_flags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<lfc_dg_frame_start_lfc_dg_frame_start_flags>())).downlink
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(lfc_dg_frame_start_lfc_dg_frame_start_flags),
            "::",
            stringify!(downlink)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<lfc_dg_frame_start_lfc_dg_frame_start_flags>())).should_ack
                as *const _ as usize
        },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(lfc_dg_frame_start_lfc_dg_frame_start_flags),
            "::",
            stringify!(should_ack)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<lfc_dg_frame_start_lfc_dg_frame_start_flags>())).cts_rts
                as *const _ as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(lfc_dg_frame_start_lfc_dg_frame_start_flags),
            "::",
            stringify!(cts_rts)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<lfc_dg_frame_start_lfc_dg_frame_start_flags>())).priority
                as *const _ as usize
        },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(lfc_dg_frame_start_lfc_dg_frame_start_flags),
            "::",
            stringify!(priority)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<lfc_dg_frame_start_lfc_dg_frame_start_flags>())).ldpc as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(lfc_dg_frame_start_lfc_dg_frame_start_flags),
            "::",
            stringify!(ldpc)
        )
    );
}
#[test]
fn bindgen_test_layout_lfc_dg_frame_start() {
    assert_eq!(
        ::std::mem::size_of::<lfc_dg_frame_start>(),
        168usize,
        concat!("Size of: ", stringify!(lfc_dg_frame_start))
    );
    assert_eq!(
        ::std::mem::align_of::<lfc_dg_frame_start>(),
        8usize,
        concat!("Alignment of ", stringify!(lfc_dg_frame_start))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lfc_dg_frame_start>())).flags as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(lfc_dg_frame_start),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lfc_dg_frame_start>())).oui as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(lfc_dg_frame_start),
            "::",
            stringify!(oui)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lfc_dg_frame_start>())).did as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(lfc_dg_frame_start),
            "::",
            stringify!(did)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lfc_dg_frame_start>())).fp as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(lfc_dg_frame_start),
            "::",
            stringify!(fp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lfc_dg_frame_start>())).seq as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(lfc_dg_frame_start),
            "::",
            stringify!(seq)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lfc_dg_frame_start>())).fragments as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(lfc_dg_frame_start),
            "::",
            stringify!(fragments)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lfc_dg_frame_start>())).pay_len as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(lfc_dg_frame_start),
            "::",
            stringify!(pay_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lfc_dg_frame_start>())).pay as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(lfc_dg_frame_start),
            "::",
            stringify!(pay)
        )
    );
}
#[doc = " Frame Data."]
#[doc = ""]
#[doc = " The Frame Data Datagram contains chunks of payload data that"]
#[doc = " correspond to a previous Start of Frame Datagram. The Sequence ID"]
#[doc = " should be included in the fingerprint generation to avoid crosstalk"]
#[doc = " between frames, but it is not needed to transmit it. The fragment"]
#[doc = " number is used to determine the ordering of the payload fragments."]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct lfc_dg_frame_data {
    #[doc = "< Flags."]
    pub flags: lfc_dg_frame_data_lfc_dg_frame_data_flags,
    #[doc = " Organization ID."]
    pub oui: u32,
    #[doc = " Device ID."]
    pub did: u32,
    #[doc = " Fingerprint."]
    pub fp: u32,
    #[doc = " Fragment number."]
    pub fragment: u32,
    #[doc = " Length (not capacity) of following payload."]
    pub pay_len: size_t,
    #[doc = " Data payload."]
    pub pay: [u8; 128usize],
}
#[doc = " Datagram flags."]
#[doc = ""]
#[doc = " `should_ack` and `cts_rts` should take effect after all the"]
#[doc = " subsequent Frame Data datagrams have been sent."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lfc_dg_frame_data_lfc_dg_frame_data_flags {
    #[doc = " The packet, beyond the Tag field, is encoded with a Low"]
    #[doc = " Density Parity Code. The specific code used depends on the"]
    #[doc = " maximum datagram size for the current region and spreading"]
    #[doc = " factor."]
    pub ldpc: bool,
}
#[test]
fn bindgen_test_layout_lfc_dg_frame_data_lfc_dg_frame_data_flags() {
    assert_eq!(
        ::std::mem::size_of::<lfc_dg_frame_data_lfc_dg_frame_data_flags>(),
        1usize,
        concat!(
            "Size of: ",
            stringify!(lfc_dg_frame_data_lfc_dg_frame_data_flags)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<lfc_dg_frame_data_lfc_dg_frame_data_flags>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(lfc_dg_frame_data_lfc_dg_frame_data_flags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<lfc_dg_frame_data_lfc_dg_frame_data_flags>())).ldpc as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(lfc_dg_frame_data_lfc_dg_frame_data_flags),
            "::",
            stringify!(ldpc)
        )
    );
}
#[test]
fn bindgen_test_layout_lfc_dg_frame_data() {
    assert_eq!(
        ::std::mem::size_of::<lfc_dg_frame_data>(),
        160usize,
        concat!("Size of: ", stringify!(lfc_dg_frame_data))
    );
    assert_eq!(
        ::std::mem::align_of::<lfc_dg_frame_data>(),
        8usize,
        concat!("Alignment of ", stringify!(lfc_dg_frame_data))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lfc_dg_frame_data>())).flags as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(lfc_dg_frame_data),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lfc_dg_frame_data>())).oui as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(lfc_dg_frame_data),
            "::",
            stringify!(oui)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lfc_dg_frame_data>())).did as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(lfc_dg_frame_data),
            "::",
            stringify!(did)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lfc_dg_frame_data>())).fp as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(lfc_dg_frame_data),
            "::",
            stringify!(fp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lfc_dg_frame_data>())).fragment as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(lfc_dg_frame_data),
            "::",
            stringify!(fragment)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lfc_dg_frame_data>())).pay_len as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(lfc_dg_frame_data),
            "::",
            stringify!(pay_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lfc_dg_frame_data>())).pay as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(lfc_dg_frame_data),
            "::",
            stringify!(pay)
        )
    );
}
#[doc = " Ack."]
#[doc = ""]
#[doc = " The Ack datagram is used to indicate success/failure of a prior"]
#[doc = " transmission, in response to the prior transmission having the"]
#[doc = " Should ACK flag set. The Ack datagram can indicate success or"]
#[doc = " failure and request retransmits."]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct lfc_dg_ack {
    #[doc = " Ack-specific flags."]
    pub flags: lfc_dg_ack_lfc_dg_ack_flags,
    #[doc = " Organization ID."]
    pub oui: u32,
    #[doc = " Device ID."]
    pub did: u32,
    #[doc = " Fingerprint."]
    pub fp: u32,
    #[doc = " Sequence number."]
    pub seq: u32,
    #[doc = " Length (not capacity) of following payload."]
    pub pay_len: size_t,
    #[doc = " Data payload."]
    pub pay: [u8; 128usize],
}
#[doc = " Ack-specific flags."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lfc_dg_ack_lfc_dg_ack_flags {
    #[doc = " The receiver was unable to receive the previous message."]
    pub failure: bool,
    #[doc = " Downlink only."]
    #[doc = ""]
    #[doc = " The receiver requests the sender to renegotiate a session key."]
    pub session_expired: bool,
    #[doc = " Clear-to-send/ready-to-send."]
    #[doc = ""]
    #[doc = " On uplink this bit indicates the device is ready to receive, on"]
    #[doc = " downlink it indicates further information follows."]
    pub cts_rts: bool,
    #[doc = " Retransmit requested."]
    pub retransmit: bool,
    #[doc = " LDCP Encoding."]
    #[doc = ""]
    #[doc = " The packet, beyond the Tag field, is encoded with a [Low"]
    #[doc = " Density Parity"]
    #[doc = " Code](https://en.wikipedia.org/wiki/Low-density_parity-check_code)."]
    #[doc = " The specific code used depends on the maximum datagram size for"]
    #[doc = " the current region and spreading factor."]
    pub ldpc: bool,
}
#[test]
fn bindgen_test_layout_lfc_dg_ack_lfc_dg_ack_flags() {
    assert_eq!(
        ::std::mem::size_of::<lfc_dg_ack_lfc_dg_ack_flags>(),
        5usize,
        concat!("Size of: ", stringify!(lfc_dg_ack_lfc_dg_ack_flags))
    );
    assert_eq!(
        ::std::mem::align_of::<lfc_dg_ack_lfc_dg_ack_flags>(),
        1usize,
        concat!("Alignment of ", stringify!(lfc_dg_ack_lfc_dg_ack_flags))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<lfc_dg_ack_lfc_dg_ack_flags>())).failure as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(lfc_dg_ack_lfc_dg_ack_flags),
            "::",
            stringify!(failure)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<lfc_dg_ack_lfc_dg_ack_flags>())).session_expired as *const _
                as usize
        },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(lfc_dg_ack_lfc_dg_ack_flags),
            "::",
            stringify!(session_expired)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<lfc_dg_ack_lfc_dg_ack_flags>())).cts_rts as *const _ as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(lfc_dg_ack_lfc_dg_ack_flags),
            "::",
            stringify!(cts_rts)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<lfc_dg_ack_lfc_dg_ack_flags>())).retransmit as *const _ as usize
        },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(lfc_dg_ack_lfc_dg_ack_flags),
            "::",
            stringify!(retransmit)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<lfc_dg_ack_lfc_dg_ack_flags>())).ldpc as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(lfc_dg_ack_lfc_dg_ack_flags),
            "::",
            stringify!(ldpc)
        )
    );
}
#[test]
fn bindgen_test_layout_lfc_dg_ack() {
    assert_eq!(
        ::std::mem::size_of::<lfc_dg_ack>(),
        160usize,
        concat!("Size of: ", stringify!(lfc_dg_ack))
    );
    assert_eq!(
        ::std::mem::align_of::<lfc_dg_ack>(),
        8usize,
        concat!("Alignment of ", stringify!(lfc_dg_ack))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lfc_dg_ack>())).flags as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(lfc_dg_ack),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lfc_dg_ack>())).oui as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(lfc_dg_ack),
            "::",
            stringify!(oui)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lfc_dg_ack>())).did as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(lfc_dg_ack),
            "::",
            stringify!(did)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lfc_dg_ack>())).fp as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(lfc_dg_ack),
            "::",
            stringify!(fp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lfc_dg_ack>())).seq as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(lfc_dg_ack),
            "::",
            stringify!(seq)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lfc_dg_ack>())).pay_len as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(lfc_dg_ack),
            "::",
            stringify!(pay_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lfc_dg_ack>())).pay as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(lfc_dg_ack),
            "::",
            stringify!(pay)
        )
    );
}
#[doc = " Success, no error."]
pub const lfc_res_lfc_res_ok: lfc_res = 0;
#[doc = " Received datagram does not match configured OUI or DID."]
pub const lfc_res_lfc_res_err_addr: lfc_res = 1;
#[doc = " Received datagram's fingerprint does not match locally"]
#[doc = " computed fingerprint."]
pub const lfc_res_lfc_res_err_fingerprint: lfc_res = 2;
#[doc = " Generic, exceptional error."]
pub const lfc_res_lfc_res_err_exception: lfc_res = 3;
#[doc = " Provided buffer is too small for request."]
pub const lfc_res_lfc_res_err_nomem: lfc_res = 4;
#[doc = " Invalid datagram type."]
pub const lfc_res_lfc_res_invalid_type: lfc_res = 5;
#[doc = " Invalid datagram flags."]
pub const lfc_res_lfc_res_invalid_flags: lfc_res = 6;
#[doc = " Return codes for top-level API calls."]
pub type lfc_res = ::std::os::raw::c_uint;
#[doc = " LongFi user configuration."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lfc_user_cfg {
    #[doc = " Data provided by user, and included with every callback."]
    pub cb_data: *mut ::std::os::raw::c_void,
    #[doc = " Organizational Unique Identifier."]
    pub oui: u32,
    #[doc = " Device ID."]
    pub did: u32,
    #[doc = " Session key."]
    pub key: *const ::std::os::raw::c_void,
    #[doc = " Size (in bytes) of session key."]
    pub key_len: size_t,
}
#[test]
fn bindgen_test_layout_lfc_user_cfg() {
    assert_eq!(
        ::std::mem::size_of::<lfc_user_cfg>(),
        32usize,
        concat!("Size of: ", stringify!(lfc_user_cfg))
    );
    assert_eq!(
        ::std::mem::align_of::<lfc_user_cfg>(),
        8usize,
        concat!("Alignment of ", stringify!(lfc_user_cfg))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lfc_user_cfg>())).cb_data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(lfc_user_cfg),
            "::",
            stringify!(cb_data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lfc_user_cfg>())).oui as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(lfc_user_cfg),
            "::",
            stringify!(oui)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lfc_user_cfg>())).did as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(lfc_user_cfg),
            "::",
            stringify!(did)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lfc_user_cfg>())).key as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(lfc_user_cfg),
            "::",
            stringify!(key)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lfc_user_cfg>())).key_len as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(lfc_user_cfg),
            "::",
            stringify!(key_len)
        )
    );
}
#[doc = " LongFi context."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lfc {
    #[doc = " Monotonically increasing number included in datagrams."]
    pub seq: u32,
    #[doc = " User-provided configuration."]
    pub cfg: lfc_user_cfg,
}
#[test]
fn bindgen_test_layout_lfc() {
    assert_eq!(
        ::std::mem::size_of::<lfc>(),
        40usize,
        concat!("Size of: ", stringify!(lfc))
    );
    assert_eq!(
        ::std::mem::align_of::<lfc>(),
        8usize,
        concat!("Alignment of ", stringify!(lfc))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lfc>())).seq as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(lfc), "::", stringify!(seq))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lfc>())).cfg as *const _ as usize },
        8usize,
        concat!("Offset of field: ", stringify!(lfc), "::", stringify!(cfg))
    );
}
#[doc = " Represents this library's version."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lfc_version {
    #[doc = " Indicates braking changes when incremented."]
    pub major: u8,
    #[doc = " Indicates added functionality when incremented."]
    pub minor: u8,
    #[doc = " Indicates bug fixes when incremented."]
    pub patch: u8,
}
#[test]
fn bindgen_test_layout_lfc_version() {
    assert_eq!(
        ::std::mem::size_of::<lfc_version>(),
        3usize,
        concat!("Size of: ", stringify!(lfc_version))
    );
    assert_eq!(
        ::std::mem::align_of::<lfc_version>(),
        1usize,
        concat!("Alignment of ", stringify!(lfc_version))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lfc_version>())).major as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(lfc_version),
            "::",
            stringify!(major)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lfc_version>())).minor as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(lfc_version),
            "::",
            stringify!(minor)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lfc_version>())).patch as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(lfc_version),
            "::",
            stringify!(patch)
        )
    );
}
extern "C" {
    #[doc = " Returns `longfi-core`'s version number."]
    pub fn lfc_version() -> lfc_version;
}
extern "C" {
    #[doc = " Initializes a user-provided `lfc` object."]
    #[doc = ""]
    #[doc = " @param lfc               LongFi Context."]
    #[doc = " @param cfg               User-provided configuration."]
    pub fn lfc_init(lfc: *mut lfc, cfg: lfc_user_cfg);
}
extern "C" {
    #[doc = " Decodes a datagram from `in` buffer."]
    #[doc = ""]
    #[doc = " @param lfc               LongFi Context."]
    #[doc = " @param[in] in            Buffer containing an encoded datagram."]
    #[doc = " @param in_len            Length of `in`."]
    #[doc = " @param[out] out          Buffer to write decoded payload to."]
    #[doc = " @param[in,out] out_len    in: capacity of `out` buffer.\\n"]
    #[doc = "                          out: actual size of payload."]
    pub fn lfc_receive(
        lfc: *const lfc,
        in_: *const u8,
        in_len: size_t,
        out: *mut u8,
        out_len: *mut size_t,
    ) -> lfc_res;
}
extern "C" {
    #[doc = " Creates and encodes a datagram into the provided `out` buffer from"]
    #[doc = " `pay`."]
    #[doc = ""]
    #[doc = " @param lfc               LongFi Context."]
    #[doc = " @param pay               Payload you want to send."]
    #[doc = " @param pay_len           Length of `pay`."]
    #[doc = " @param out               Buffer to serialize datagram into."]
    #[doc = " @param[in,out] out_len    in: capacity of `out` buffer.\\n"]
    #[doc = "                          out: actual serialized size of datagram."]
    pub fn lfc_transmit(
        lfc: *mut lfc,
        pay: *const u8,
        pay_len: size_t,
        out: *mut u8,
        out_len: *mut size_t,
    ) -> lfc_res;
}
pub type __builtin_va_list = [__va_list_tag; 1usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __va_list_tag {
    pub gp_offset: ::std::os::raw::c_uint,
    pub fp_offset: ::std::os::raw::c_uint,
    pub overflow_arg_area: *mut ::std::os::raw::c_void,
    pub reg_save_area: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout___va_list_tag() {
    assert_eq!(
        ::std::mem::size_of::<__va_list_tag>(),
        24usize,
        concat!("Size of: ", stringify!(__va_list_tag))
    );
    assert_eq!(
        ::std::mem::align_of::<__va_list_tag>(),
        8usize,
        concat!("Alignment of ", stringify!(__va_list_tag))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).gp_offset as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(gp_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).fp_offset as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(fp_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).overflow_arg_area as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(overflow_arg_area)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).reg_save_area as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(reg_save_area)
        )
    );
}
