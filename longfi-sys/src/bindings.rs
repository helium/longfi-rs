/* automatically generated by rust-bindgen 0.55.1 */

#[repr(C)]
pub struct __BindgenUnionField<T>(::core::marker::PhantomData<T>);
impl<T> __BindgenUnionField<T> {
    #[inline]
    pub const fn new() -> Self {
        __BindgenUnionField(::core::marker::PhantomData)
    }
    #[inline]
    pub unsafe fn as_ref(&self) -> &T {
        ::core::mem::transmute(self)
    }
    #[inline]
    pub unsafe fn as_mut(&mut self) -> &mut T {
        ::core::mem::transmute(self)
    }
}
impl<T> ::core::default::Default for __BindgenUnionField<T> {
    #[inline]
    fn default() -> Self {
        Self::new()
    }
}
impl<T> ::core::clone::Clone for __BindgenUnionField<T> {
    #[inline]
    fn clone(&self) -> Self {
        Self::new()
    }
}
impl<T> ::core::marker::Copy for __BindgenUnionField<T> {}
impl<T> ::core::fmt::Debug for __BindgenUnionField<T> {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.write_str("__BindgenUnionField")
    }
}
impl<T> ::core::hash::Hash for __BindgenUnionField<T> {
    fn hash<H: ::core::hash::Hasher>(&self, _state: &mut H) {}
}
impl<T> ::core::cmp::PartialEq for __BindgenUnionField<T> {
    fn eq(&self, _other: &__BindgenUnionField<T>) -> bool {
        true
    }
}
impl<T> ::core::cmp::Eq for __BindgenUnionField<T> {}
pub type size_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cursor {
    pub buf: *mut u8,
    pub len: size_t,
    pub pos: size_t,
}
#[test]
fn bindgen_test_layout_cursor() {
    assert_eq!(
        ::core::mem::size_of::<cursor>(),
        24usize,
        concat!("Size of: ", stringify!(cursor))
    );
    assert_eq!(
        ::core::mem::align_of::<cursor>(),
        8usize,
        concat!("Alignment of ", stringify!(cursor))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<cursor>())).buf as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cursor),
            "::",
            stringify!(buf)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<cursor>())).len as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cursor),
            "::",
            stringify!(len)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<cursor>())).pos as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cursor),
            "::",
            stringify!(pos)
        )
    );
}
pub const cursor_res_cursor_res_ok: cursor_res = 0;
pub const cursor_res_cursor_res_err_buf_exhausted: cursor_res = 1;
pub type cursor_res = ::std::os::raw::c_uint;
extern "C" {
    #[doc = " Creates and returns a new cursor object"]
    pub fn cursor_new(buf: *mut ::core::ffi::c_void, buflen: size_t) -> cursor;
}
extern "C" {
    pub fn cursor_remaining(csr: *const cursor) -> size_t;
}
extern "C" {
    pub fn cursor_take(csr: *mut cursor, n: size_t, dst: *mut u8) -> cursor_res;
}
extern "C" {
    pub fn cursor_take_remaining(csr: *mut cursor, dst: *mut u8) -> size_t;
}
extern "C" {
    pub fn cursor_put(
        csr: *mut cursor,
        src: *const ::core::ffi::c_void,
        src_len: size_t,
    ) -> cursor_res;
}
extern "C" {
    pub fn cursor_unpack_le_u8(csr: *mut cursor, dst: *mut u8) -> cursor_res;
}
extern "C" {
    pub fn cursor_unpack_le_i8(csr: *mut cursor, dst: *mut i8) -> cursor_res;
}
extern "C" {
    pub fn cursor_unpack_le_u16(csr: *mut cursor, dst: *mut u16) -> cursor_res;
}
extern "C" {
    pub fn cursor_unpack_le_i16(csr: *mut cursor, dst: *mut i16) -> cursor_res;
}
extern "C" {
    pub fn cursor_unpack_le_u32(csr: *mut cursor, dst: *mut u32) -> cursor_res;
}
extern "C" {
    pub fn cursor_unpack_le_i32(csr: *mut cursor, dst: *mut i32) -> cursor_res;
}
extern "C" {
    pub fn cursor_unpack_le_u64(csr: *mut cursor, dst: *mut u64) -> cursor_res;
}
extern "C" {
    pub fn cursor_unpack_le_i64(csr: *mut cursor, dst: *mut i64) -> cursor_res;
}
extern "C" {
    pub fn cursor_unpack_le_f(csr: *mut cursor, dst: *mut f32) -> cursor_res;
}
extern "C" {
    pub fn cursor_unpack_le_d(csr: *mut cursor, dst: *mut f64) -> cursor_res;
}
extern "C" {
    pub fn cursor_unpack_be_u8(csr: *mut cursor, dst: *mut u8) -> cursor_res;
}
extern "C" {
    pub fn cursor_unpack_be_i8(csr: *mut cursor, dst: *mut i8) -> cursor_res;
}
extern "C" {
    pub fn cursor_unpack_be_u16(csr: *mut cursor, dst: *mut u16) -> cursor_res;
}
extern "C" {
    pub fn cursor_unpack_be_i16(csr: *mut cursor, dst: *mut i16) -> cursor_res;
}
extern "C" {
    pub fn cursor_unpack_be_u32(csr: *mut cursor, dst: *mut u32) -> cursor_res;
}
extern "C" {
    pub fn cursor_unpack_be_i32(csr: *mut cursor, dst: *mut i32) -> cursor_res;
}
extern "C" {
    pub fn cursor_unpack_be_u64(csr: *mut cursor, dst: *mut u64) -> cursor_res;
}
extern "C" {
    pub fn cursor_unpack_be_i64(csr: *mut cursor, dst: *mut i64) -> cursor_res;
}
extern "C" {
    pub fn cursor_unpack_be_f(csr: *mut cursor, dst: *mut f32) -> cursor_res;
}
extern "C" {
    pub fn cursor_unpack_be_d(csr: *mut cursor, dst: *mut f64) -> cursor_res;
}
extern "C" {
    pub fn cursor_pack_le_u8(csr: *mut cursor, val: u8) -> cursor_res;
}
extern "C" {
    pub fn cursor_pack_le_i8(csr: *mut cursor, val: i8) -> cursor_res;
}
extern "C" {
    pub fn cursor_pack_le_u16(csr: *mut cursor, val: u16) -> cursor_res;
}
extern "C" {
    pub fn cursor_pack_le_i16(csr: *mut cursor, val: i16) -> cursor_res;
}
extern "C" {
    pub fn cursor_pack_le_u32(csr: *mut cursor, val: u32) -> cursor_res;
}
extern "C" {
    pub fn cursor_pack_le_i32(csr: *mut cursor, val: i32) -> cursor_res;
}
extern "C" {
    pub fn cursor_pack_le_u64(csr: *mut cursor, val: u64) -> cursor_res;
}
extern "C" {
    pub fn cursor_pack_le_i64(csr: *mut cursor, val: i64) -> cursor_res;
}
extern "C" {
    pub fn cursor_pack_le_f(csr: *mut cursor, val: f32) -> cursor_res;
}
extern "C" {
    pub fn cursor_pack_le_d(csr: *mut cursor, val: f64) -> cursor_res;
}
extern "C" {
    pub fn cursor_pack_be_u8(csr: *mut cursor, val: u8) -> cursor_res;
}
extern "C" {
    pub fn cursor_pack_be_i8(csr: *mut cursor, val: i8) -> cursor_res;
}
extern "C" {
    pub fn cursor_pack_be_u16(csr: *mut cursor, val: u16) -> cursor_res;
}
extern "C" {
    pub fn cursor_pack_be_i16(csr: *mut cursor, val: i16) -> cursor_res;
}
extern "C" {
    pub fn cursor_pack_be_u32(csr: *mut cursor, val: u32) -> cursor_res;
}
extern "C" {
    pub fn cursor_pack_be_i32(csr: *mut cursor, val: i32) -> cursor_res;
}
extern "C" {
    pub fn cursor_pack_be_u64(csr: *mut cursor, val: u64) -> cursor_res;
}
extern "C" {
    pub fn cursor_pack_be_i64(csr: *mut cursor, val: i64) -> cursor_res;
}
extern "C" {
    pub fn cursor_pack_be_f(csr: *mut cursor, val: f32) -> cursor_res;
}
extern "C" {
    pub fn cursor_pack_be_d(csr: *mut cursor, val: f64) -> cursor_res;
}
#[doc = " Monolithic."]
pub const lfc_dg_type_lfc_dg_type_monolithic: lfc_dg_type = 1;
#[doc = " Start of Frame."]
pub const lfc_dg_type_lfc_dg_type_frame_start: lfc_dg_type = 2;
#[doc = " Frame Data."]
pub const lfc_dg_type_lfc_dg_type_frame_data: lfc_dg_type = 3;
#[doc = " Ack."]
pub const lfc_dg_type_lfc_dg_type_ack: lfc_dg_type = 4;
#[doc = " The type (or variant) of datagram."]
pub type lfc_dg_type = ::std::os::raw::c_uint;
#[doc = " The result of parsing the golay-encoded header."]
#[repr(C)]
#[derive(Debug)]
pub struct lfc_dg_hdr {
    #[doc = " Number of corrected bit errors."]
    pub bit_errs: ::std::os::raw::c_int,
    #[doc = " Unparsed flags bits."]
    pub flag_bits: u8,
    #[doc = " This datagram's type"]
    pub type_: lfc_dg_type,
}
#[test]
fn bindgen_test_layout_lfc_dg_hdr() {
    assert_eq!(
        ::core::mem::size_of::<lfc_dg_hdr>(),
        12usize,
        concat!("Size of: ", stringify!(lfc_dg_hdr))
    );
    assert_eq!(
        ::core::mem::align_of::<lfc_dg_hdr>(),
        4usize,
        concat!("Alignment of ", stringify!(lfc_dg_hdr))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<lfc_dg_hdr>())).bit_errs as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(lfc_dg_hdr),
            "::",
            stringify!(bit_errs)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<lfc_dg_hdr>())).flag_bits as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(lfc_dg_hdr),
            "::",
            stringify!(flag_bits)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<lfc_dg_hdr>())).type_ as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(lfc_dg_hdr),
            "::",
            stringify!(type_)
        )
    );
}
#[doc = " Monolithic."]
#[doc = ""]
#[doc = " A Monolithic Datagram is expected to be the most common way to"]
#[doc = " transmit data that can fit within a single Datagram. When sending"]
#[doc = " or receiving small amounts of data, a Monolithic Datagram should be"]
#[doc = " used."]
#[repr(C)]
pub struct lfc_dg_monolithic {
    #[doc = "< Flags."]
    pub flags: lfc_dg_monolithic_lfc_dg_monolithic_flags,
    #[doc = " Organization ID."]
    pub oui: u32,
    #[doc = " Device ID."]
    pub did: u32,
    #[doc = " Fingerprint."]
    pub fp: u32,
    #[doc = " Sequence number."]
    pub seq: u32,
    #[doc = " Length (not capacity) of following payload."]
    pub pay_len: size_t,
    #[doc = " Data payload."]
    pub pay: [u8; 128usize],
}
#[doc = " Datagram flags."]
#[repr(C)]
#[derive(Debug)]
pub struct lfc_dg_monolithic_lfc_dg_monolithic_flags {
    #[doc = " This packet is destined for a Device if this bit is set."]
    pub downlink: bool,
    #[doc = " The receiver of this packet should acknowledge receipt."]
    pub should_ack: bool,
    #[doc = " On uplink this bit indicates the device is ready to"]
    #[doc = " receive, on downlink it indicates further information"]
    #[doc = " follows."]
    pub cts_rts: bool,
    #[doc = " This indicates to the receiver that the packet is deemed"]
    #[doc = " urgent by the sender and the receiver can choose to act"]
    #[doc = " accordingly."]
    pub priority: bool,
    #[doc = " The packet, beyond the Tag field, is encoded with a Low"]
    #[doc = " Density Parity Code. The specific code used depends on the"]
    #[doc = " maximum datagram size for the current region and spreading"]
    #[doc = " factor."]
    pub ldpc: bool,
}
#[test]
fn bindgen_test_layout_lfc_dg_monolithic_lfc_dg_monolithic_flags() {
    assert_eq!(
        ::core::mem::size_of::<lfc_dg_monolithic_lfc_dg_monolithic_flags>(),
        5usize,
        concat!(
            "Size of: ",
            stringify!(lfc_dg_monolithic_lfc_dg_monolithic_flags)
        )
    );
    assert_eq!(
        ::core::mem::align_of::<lfc_dg_monolithic_lfc_dg_monolithic_flags>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(lfc_dg_monolithic_lfc_dg_monolithic_flags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<lfc_dg_monolithic_lfc_dg_monolithic_flags>())).downlink
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(lfc_dg_monolithic_lfc_dg_monolithic_flags),
            "::",
            stringify!(downlink)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<lfc_dg_monolithic_lfc_dg_monolithic_flags>())).should_ack
                as *const _ as usize
        },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(lfc_dg_monolithic_lfc_dg_monolithic_flags),
            "::",
            stringify!(should_ack)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<lfc_dg_monolithic_lfc_dg_monolithic_flags>())).cts_rts
                as *const _ as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(lfc_dg_monolithic_lfc_dg_monolithic_flags),
            "::",
            stringify!(cts_rts)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<lfc_dg_monolithic_lfc_dg_monolithic_flags>())).priority
                as *const _ as usize
        },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(lfc_dg_monolithic_lfc_dg_monolithic_flags),
            "::",
            stringify!(priority)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<lfc_dg_monolithic_lfc_dg_monolithic_flags>())).ldpc as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(lfc_dg_monolithic_lfc_dg_monolithic_flags),
            "::",
            stringify!(ldpc)
        )
    );
}
#[test]
fn bindgen_test_layout_lfc_dg_monolithic() {
    assert_eq!(
        ::core::mem::size_of::<lfc_dg_monolithic>(),
        160usize,
        concat!("Size of: ", stringify!(lfc_dg_monolithic))
    );
    assert_eq!(
        ::core::mem::align_of::<lfc_dg_monolithic>(),
        8usize,
        concat!("Alignment of ", stringify!(lfc_dg_monolithic))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<lfc_dg_monolithic>())).flags as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(lfc_dg_monolithic),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<lfc_dg_monolithic>())).oui as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(lfc_dg_monolithic),
            "::",
            stringify!(oui)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<lfc_dg_monolithic>())).did as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(lfc_dg_monolithic),
            "::",
            stringify!(did)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<lfc_dg_monolithic>())).fp as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(lfc_dg_monolithic),
            "::",
            stringify!(fp)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<lfc_dg_monolithic>())).seq as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(lfc_dg_monolithic),
            "::",
            stringify!(seq)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<lfc_dg_monolithic>())).pay_len as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(lfc_dg_monolithic),
            "::",
            stringify!(pay_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<lfc_dg_monolithic>())).pay as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(lfc_dg_monolithic),
            "::",
            stringify!(pay)
        )
    );
}
#[doc = " Start of Frame."]
#[doc = ""]
#[doc = " A Start of Frame Datagram is used to describe a series of following"]
#[doc = " Datagrams that contain a payload larger than a Monolithic Datagram"]
#[doc = " can hold. In some cases, if there's room, some of the payload may"]
#[doc = " appear at the end of this Datagram."]
#[repr(C)]
pub struct lfc_dg_frame_start {
    #[doc = "< Flags."]
    pub flags: lfc_dg_frame_start_lfc_dg_frame_start_flags,
    #[doc = " Organization ID."]
    pub oui: u32,
    #[doc = " Device ID."]
    pub did: u32,
    #[doc = " Fingerprint."]
    pub fp: u32,
    #[doc = " Sequence number."]
    pub seq: u32,
    #[doc = " Fragment count."]
    pub fragments: u32,
    #[doc = " Length (not capacity) of following payload."]
    pub pay_len: size_t,
    #[doc = " Data payload."]
    pub pay: [u8; 128usize],
}
#[doc = " Datagram flags."]
#[doc = ""]
#[doc = " `should_ack` and `cts_rts` should take effect after all the"]
#[doc = " subsequent Frame Data datagrams have been sent."]
#[repr(C)]
#[derive(Debug)]
pub struct lfc_dg_frame_start_lfc_dg_frame_start_flags {
    #[doc = " This packet is destined for a Device if this bit is set."]
    pub downlink: bool,
    #[doc = " The receiver of this packet should acknowledge receipt."]
    pub should_ack: bool,
    #[doc = " On uplink this bit indicates the device is ready to"]
    #[doc = " receive, on downlink it indicates further information"]
    #[doc = " follows."]
    pub cts_rts: bool,
    #[doc = " This indicates to the receiver that the packet is deemed"]
    #[doc = " urgent by the sender and the receiver can choose to act"]
    #[doc = " accordingly."]
    pub priority: bool,
    #[doc = " The packet, beyond the Tag field, is encoded with a Low"]
    #[doc = " Density Parity Code. The specific code used depends on the"]
    #[doc = " maximum datagram size for the current region and spreading"]
    #[doc = " factor."]
    pub ldpc: bool,
}
#[test]
fn bindgen_test_layout_lfc_dg_frame_start_lfc_dg_frame_start_flags() {
    assert_eq!(
        ::core::mem::size_of::<lfc_dg_frame_start_lfc_dg_frame_start_flags>(),
        5usize,
        concat!(
            "Size of: ",
            stringify!(lfc_dg_frame_start_lfc_dg_frame_start_flags)
        )
    );
    assert_eq!(
        ::core::mem::align_of::<lfc_dg_frame_start_lfc_dg_frame_start_flags>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(lfc_dg_frame_start_lfc_dg_frame_start_flags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<lfc_dg_frame_start_lfc_dg_frame_start_flags>())).downlink
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(lfc_dg_frame_start_lfc_dg_frame_start_flags),
            "::",
            stringify!(downlink)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<lfc_dg_frame_start_lfc_dg_frame_start_flags>())).should_ack
                as *const _ as usize
        },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(lfc_dg_frame_start_lfc_dg_frame_start_flags),
            "::",
            stringify!(should_ack)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<lfc_dg_frame_start_lfc_dg_frame_start_flags>())).cts_rts
                as *const _ as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(lfc_dg_frame_start_lfc_dg_frame_start_flags),
            "::",
            stringify!(cts_rts)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<lfc_dg_frame_start_lfc_dg_frame_start_flags>())).priority
                as *const _ as usize
        },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(lfc_dg_frame_start_lfc_dg_frame_start_flags),
            "::",
            stringify!(priority)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<lfc_dg_frame_start_lfc_dg_frame_start_flags>())).ldpc
                as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(lfc_dg_frame_start_lfc_dg_frame_start_flags),
            "::",
            stringify!(ldpc)
        )
    );
}
#[test]
fn bindgen_test_layout_lfc_dg_frame_start() {
    assert_eq!(
        ::core::mem::size_of::<lfc_dg_frame_start>(),
        168usize,
        concat!("Size of: ", stringify!(lfc_dg_frame_start))
    );
    assert_eq!(
        ::core::mem::align_of::<lfc_dg_frame_start>(),
        8usize,
        concat!("Alignment of ", stringify!(lfc_dg_frame_start))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<lfc_dg_frame_start>())).flags as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(lfc_dg_frame_start),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<lfc_dg_frame_start>())).oui as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(lfc_dg_frame_start),
            "::",
            stringify!(oui)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<lfc_dg_frame_start>())).did as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(lfc_dg_frame_start),
            "::",
            stringify!(did)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<lfc_dg_frame_start>())).fp as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(lfc_dg_frame_start),
            "::",
            stringify!(fp)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<lfc_dg_frame_start>())).seq as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(lfc_dg_frame_start),
            "::",
            stringify!(seq)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<lfc_dg_frame_start>())).fragments as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(lfc_dg_frame_start),
            "::",
            stringify!(fragments)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<lfc_dg_frame_start>())).pay_len as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(lfc_dg_frame_start),
            "::",
            stringify!(pay_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<lfc_dg_frame_start>())).pay as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(lfc_dg_frame_start),
            "::",
            stringify!(pay)
        )
    );
}
#[doc = " Frame Data."]
#[doc = ""]
#[doc = " The Frame Data Datagram contains chunks of payload data that"]
#[doc = " correspond to a previous Start of Frame Datagram. The Sequence ID"]
#[doc = " should be included in the fingerprint generation to avoid crosstalk"]
#[doc = " between frames, but it is not needed to transmit it. The fragment"]
#[doc = " number is used to determine the ordering of the payload fragments."]
#[repr(C)]
pub struct lfc_dg_frame_data {
    #[doc = "< Flags."]
    pub flags: lfc_dg_frame_data_lfc_dg_frame_data_flags,
    #[doc = " Organization ID."]
    pub oui: u32,
    #[doc = " Device ID."]
    pub did: u32,
    #[doc = " Fingerprint."]
    pub fp: u32,
    #[doc = " Fragment number."]
    pub fragment: u32,
    #[doc = " Length (not capacity) of following payload."]
    pub pay_len: size_t,
    #[doc = " Data payload."]
    pub pay: [u8; 128usize],
}
#[doc = " Datagram flags."]
#[doc = ""]
#[doc = " `should_ack` and `cts_rts` should take effect after all the"]
#[doc = " subsequent Frame Data datagrams have been sent."]
#[repr(C)]
#[derive(Debug)]
pub struct lfc_dg_frame_data_lfc_dg_frame_data_flags {
    #[doc = " The packet, beyond the Tag field, is encoded with a Low"]
    #[doc = " Density Parity Code. The specific code used depends on the"]
    #[doc = " maximum datagram size for the current region and spreading"]
    #[doc = " factor."]
    pub ldpc: bool,
}
#[test]
fn bindgen_test_layout_lfc_dg_frame_data_lfc_dg_frame_data_flags() {
    assert_eq!(
        ::core::mem::size_of::<lfc_dg_frame_data_lfc_dg_frame_data_flags>(),
        1usize,
        concat!(
            "Size of: ",
            stringify!(lfc_dg_frame_data_lfc_dg_frame_data_flags)
        )
    );
    assert_eq!(
        ::core::mem::align_of::<lfc_dg_frame_data_lfc_dg_frame_data_flags>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(lfc_dg_frame_data_lfc_dg_frame_data_flags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<lfc_dg_frame_data_lfc_dg_frame_data_flags>())).ldpc as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(lfc_dg_frame_data_lfc_dg_frame_data_flags),
            "::",
            stringify!(ldpc)
        )
    );
}
#[test]
fn bindgen_test_layout_lfc_dg_frame_data() {
    assert_eq!(
        ::core::mem::size_of::<lfc_dg_frame_data>(),
        160usize,
        concat!("Size of: ", stringify!(lfc_dg_frame_data))
    );
    assert_eq!(
        ::core::mem::align_of::<lfc_dg_frame_data>(),
        8usize,
        concat!("Alignment of ", stringify!(lfc_dg_frame_data))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<lfc_dg_frame_data>())).flags as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(lfc_dg_frame_data),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<lfc_dg_frame_data>())).oui as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(lfc_dg_frame_data),
            "::",
            stringify!(oui)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<lfc_dg_frame_data>())).did as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(lfc_dg_frame_data),
            "::",
            stringify!(did)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<lfc_dg_frame_data>())).fp as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(lfc_dg_frame_data),
            "::",
            stringify!(fp)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<lfc_dg_frame_data>())).fragment as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(lfc_dg_frame_data),
            "::",
            stringify!(fragment)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<lfc_dg_frame_data>())).pay_len as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(lfc_dg_frame_data),
            "::",
            stringify!(pay_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<lfc_dg_frame_data>())).pay as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(lfc_dg_frame_data),
            "::",
            stringify!(pay)
        )
    );
}
#[doc = " Ack."]
#[doc = ""]
#[doc = " The Ack datagram is used to indicate success/failure of a prior"]
#[doc = " transmission, in response to the prior transmission having the"]
#[doc = " Should ACK flag set. The Ack datagram can indicate success or"]
#[doc = " failure and request retransmits."]
#[repr(C)]
pub struct lfc_dg_ack {
    #[doc = " Ack-specific flags."]
    pub flags: lfc_dg_ack_lfc_dg_ack_flags,
    #[doc = " Organization ID."]
    pub oui: u32,
    #[doc = " Device ID."]
    pub did: u32,
    #[doc = " Fingerprint."]
    pub fp: u32,
    #[doc = " Sequence number."]
    pub seq: u32,
    #[doc = " Length (not capacity) of following payload."]
    pub pay_len: size_t,
    #[doc = " Data payload."]
    pub pay: [u8; 128usize],
}
#[doc = " Ack-specific flags."]
#[repr(C)]
#[derive(Debug)]
pub struct lfc_dg_ack_lfc_dg_ack_flags {
    #[doc = " The receiver was unable to receive the previous message."]
    pub failure: bool,
    #[doc = " Downlink only."]
    #[doc = ""]
    #[doc = " The receiver requests the sender to renegotiate a session key."]
    pub session_expired: bool,
    #[doc = " Clear-to-send/ready-to-send."]
    #[doc = ""]
    #[doc = " On uplink this bit indicates the device is ready to receive, on"]
    #[doc = " downlink it indicates further information follows."]
    pub cts_rts: bool,
    #[doc = " Retransmit requested."]
    pub retransmit: bool,
    #[doc = " LDCP Encoding."]
    #[doc = ""]
    #[doc = " The packet, beyond the Tag field, is encoded with a [Low"]
    #[doc = " Density Parity"]
    #[doc = " Code](https://en.wikipedia.org/wiki/Low-density_parity-check_code)."]
    #[doc = " The specific code used depends on the maximum datagram size for"]
    #[doc = " the current region and spreading factor."]
    pub ldpc: bool,
}
#[test]
fn bindgen_test_layout_lfc_dg_ack_lfc_dg_ack_flags() {
    assert_eq!(
        ::core::mem::size_of::<lfc_dg_ack_lfc_dg_ack_flags>(),
        5usize,
        concat!("Size of: ", stringify!(lfc_dg_ack_lfc_dg_ack_flags))
    );
    assert_eq!(
        ::core::mem::align_of::<lfc_dg_ack_lfc_dg_ack_flags>(),
        1usize,
        concat!("Alignment of ", stringify!(lfc_dg_ack_lfc_dg_ack_flags))
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<lfc_dg_ack_lfc_dg_ack_flags>())).failure as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(lfc_dg_ack_lfc_dg_ack_flags),
            "::",
            stringify!(failure)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<lfc_dg_ack_lfc_dg_ack_flags>())).session_expired as *const _
                as usize
        },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(lfc_dg_ack_lfc_dg_ack_flags),
            "::",
            stringify!(session_expired)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<lfc_dg_ack_lfc_dg_ack_flags>())).cts_rts as *const _ as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(lfc_dg_ack_lfc_dg_ack_flags),
            "::",
            stringify!(cts_rts)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<lfc_dg_ack_lfc_dg_ack_flags>())).retransmit as *const _ as usize
        },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(lfc_dg_ack_lfc_dg_ack_flags),
            "::",
            stringify!(retransmit)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<lfc_dg_ack_lfc_dg_ack_flags>())).ldpc as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(lfc_dg_ack_lfc_dg_ack_flags),
            "::",
            stringify!(ldpc)
        )
    );
}
#[test]
fn bindgen_test_layout_lfc_dg_ack() {
    assert_eq!(
        ::core::mem::size_of::<lfc_dg_ack>(),
        160usize,
        concat!("Size of: ", stringify!(lfc_dg_ack))
    );
    assert_eq!(
        ::core::mem::align_of::<lfc_dg_ack>(),
        8usize,
        concat!("Alignment of ", stringify!(lfc_dg_ack))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<lfc_dg_ack>())).flags as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(lfc_dg_ack),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<lfc_dg_ack>())).oui as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(lfc_dg_ack),
            "::",
            stringify!(oui)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<lfc_dg_ack>())).did as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(lfc_dg_ack),
            "::",
            stringify!(did)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<lfc_dg_ack>())).fp as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(lfc_dg_ack),
            "::",
            stringify!(fp)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<lfc_dg_ack>())).seq as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(lfc_dg_ack),
            "::",
            stringify!(seq)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<lfc_dg_ack>())).pay_len as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(lfc_dg_ack),
            "::",
            stringify!(pay_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<lfc_dg_ack>())).pay as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(lfc_dg_ack),
            "::",
            stringify!(pay)
        )
    );
}
extern "C" {
    #[doc = " Computes a payload hash of sizes up to 32 bytes."]
    #[doc = ""]
    #[doc = " @param[in]     pay     Payload."]
    #[doc = " @param         pay_len Length of payload in bytes."]
    #[doc = " @param[out]    out     Pointer to resultant hash buffer."]
    #[doc = " @param         out_len Desired length of hash in bytes."]
    #[doc = ""]
    #[doc = " @pre           `out_len <= 32`."]
    pub fn lfc_payload_hash(
        pay: *const u8,
        pay_len: size_t,
        out: *mut u8,
        out_len: size_t,
    ) -> lfc_res;
}
extern "C" {
    #[doc = " Calculates the fingerprint for a monolithic datagram."]
    #[doc = ""]
    #[doc = " @param[in]     key     Private cryptographic key."]
    #[doc = " @param         key_len Length of `key` in bytes."]
    #[doc = " @param         hdr     Packed, golay-decoded, 12 bits of tag and flags."]
    #[doc = " @param         oui     Orginizationally Unique Identifier."]
    #[doc = " @param         did     Device Identifier."]
    #[doc = " @param         seq     Sequence number."]
    #[doc = " @param[in]     pay     Payload bytes."]
    #[doc = " @param         pay_len Payload length in bytes."]
    #[doc = " @param[out]    out     Pointer to resultant 32 bit fingerprint."]
    #[doc = ""]
    #[doc = " @pre           `(hdr & 0b1111_0000_0000_0000) == 0`"]
    pub fn lfc_fingerprint_monolithic(
        key: *const u8,
        key_len: size_t,
        hdr: u16,
        oui: u32,
        did: u32,
        seq: u32,
        pay: *const u8,
        pay_len: size_t,
        out: *mut u32,
    ) -> lfc_res;
}
extern "C" {
    #[doc = " Verifies a datagram with a hash of its payload instead of the"]
    #[doc = " actual payload."]
    #[doc = ""]
    #[doc = " @param         fp_decl      Fingerprint we want to verify."]
    #[doc = " @param[in]     key          Private cryptographic key."]
    #[doc = " @param         key_len      Length of `key` in bytes."]
    #[doc = " @param[in]     pay_hash     Hash of payload, *NOT* the payload itself."]
    #[doc = " @param[in]     pay_hash_len Hash of payload, *NOT* the payload itself."]
    #[doc = " @param         hdr          Packed, golay-decoded, 12 bits of tag and flags."]
    #[doc = " @param         oui          Orginizationally Unique Identifier."]
    #[doc = " @param         did          Device Identifier."]
    #[doc = " @param         seq          Sequence number."]
    #[doc = ""]
    #[doc = " @pre           `(hdr & 0b1111_0000_0000_0000) == 0`"]
    pub fn lfc_fingerprint_monolithic_verify(
        fp_decl: u32,
        key: *const u8,
        key_len: size_t,
        pay_hash: *const u8,
        pay_hash_len: size_t,
        hdr: u16,
        oui: u32,
        did: u32,
        seq: u32,
    ) -> lfc_res;
}
#[repr(i32)]
#[doc = " Return codes for top-level API calls."]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum lfc_res {
    #[doc = " Success, no error."]
    lfc_res_ok = 0,
    #[doc = " Received datagram does not match configured OUI or DID."]
    lfc_res_err_addr = 1,
    #[doc = " Received datagram's fingerprint does not match locally"]
    #[doc = " computed fingerprint."]
    lfc_res_err_fingerprint = 2,
    #[doc = " Generic, exceptional error."]
    lfc_res_err_exception = 3,
    #[doc = " Provided buffer is too small for request."]
    lfc_res_err_nomem = 4,
    #[doc = " Invalid datagram type."]
    lfc_res_invalid_type = 5,
    #[doc = " Invalid datagram flags."]
    lfc_res_invalid_flags = 6,
}
#[doc = " LongFi user configuration."]
#[repr(C)]
#[derive(Debug)]
pub struct lfc_user_cfg {
    #[doc = " Data provided by user, and included with every callback."]
    pub cb_data: *mut ::core::ffi::c_void,
    #[doc = " Organizational Unique Identifier."]
    pub oui: u32,
    #[doc = " Device ID."]
    pub did: u32,
    #[doc = " Session key."]
    pub key: *const ::core::ffi::c_void,
    #[doc = " Size (in bytes) of session key."]
    pub key_len: size_t,
}
#[test]
fn bindgen_test_layout_lfc_user_cfg() {
    assert_eq!(
        ::core::mem::size_of::<lfc_user_cfg>(),
        32usize,
        concat!("Size of: ", stringify!(lfc_user_cfg))
    );
    assert_eq!(
        ::core::mem::align_of::<lfc_user_cfg>(),
        8usize,
        concat!("Alignment of ", stringify!(lfc_user_cfg))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<lfc_user_cfg>())).cb_data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(lfc_user_cfg),
            "::",
            stringify!(cb_data)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<lfc_user_cfg>())).oui as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(lfc_user_cfg),
            "::",
            stringify!(oui)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<lfc_user_cfg>())).did as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(lfc_user_cfg),
            "::",
            stringify!(did)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<lfc_user_cfg>())).key as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(lfc_user_cfg),
            "::",
            stringify!(key)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<lfc_user_cfg>())).key_len as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(lfc_user_cfg),
            "::",
            stringify!(key_len)
        )
    );
}
#[doc = " LongFi context."]
#[repr(C)]
#[derive(Debug)]
pub struct lfc {
    #[doc = " Monotonically increasing number included in datagrams."]
    pub seq: u32,
    #[doc = " User-provided configuration."]
    pub cfg: lfc_user_cfg,
}
#[test]
fn bindgen_test_layout_lfc() {
    assert_eq!(
        ::core::mem::size_of::<lfc>(),
        40usize,
        concat!("Size of: ", stringify!(lfc))
    );
    assert_eq!(
        ::core::mem::align_of::<lfc>(),
        8usize,
        concat!("Alignment of ", stringify!(lfc))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<lfc>())).seq as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(lfc), "::", stringify!(seq))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<lfc>())).cfg as *const _ as usize },
        8usize,
        concat!("Offset of field: ", stringify!(lfc), "::", stringify!(cfg))
    );
}
#[doc = " Represents this library's version."]
#[repr(C)]
#[derive(Debug)]
pub struct lfc_version {
    #[doc = " Indicates braking changes when incremented."]
    pub major: u8,
    #[doc = " Indicates added functionality when incremented."]
    pub minor: u8,
    #[doc = " Indicates bug fixes when incremented."]
    pub patch: u8,
}
#[test]
fn bindgen_test_layout_lfc_version() {
    assert_eq!(
        ::core::mem::size_of::<lfc_version>(),
        3usize,
        concat!("Size of: ", stringify!(lfc_version))
    );
    assert_eq!(
        ::core::mem::align_of::<lfc_version>(),
        1usize,
        concat!("Alignment of ", stringify!(lfc_version))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<lfc_version>())).major as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(lfc_version),
            "::",
            stringify!(major)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<lfc_version>())).minor as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(lfc_version),
            "::",
            stringify!(minor)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<lfc_version>())).patch as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(lfc_version),
            "::",
            stringify!(patch)
        )
    );
}
extern "C" {
    #[doc = " Returns `longfi-core`'s version number."]
    pub fn lfc_version() -> lfc_version;
}
extern "C" {
    #[doc = " Initializes a user-provided `lfc` object."]
    #[doc = ""]
    #[doc = " @param lfc               LongFi Context."]
    #[doc = " @param cfg               User-provided configuration."]
    pub fn lfc_init(lfc: *mut lfc, cfg: lfc_user_cfg);
}
extern "C" {
    #[doc = " Decodes a datagram from `in` buffer."]
    #[doc = ""]
    #[doc = " @param lfc               LongFi Context."]
    #[doc = " @param[in] in            Buffer containing an encoded datagram."]
    #[doc = " @param in_len            Length of `in`."]
    #[doc = " @param[out] out          Buffer to write decoded payload to."]
    #[doc = " @param[in,out] out_len    in: capacity of `out` buffer.\\n"]
    #[doc = "                          out: actual size of payload."]
    pub fn lfc_receive(
        lfc: *const lfc,
        in_: *const u8,
        in_len: size_t,
        out: *mut u8,
        out_len: *mut size_t,
    ) -> lfc_res;
}
extern "C" {
    #[doc = " Creates and encodes a datagram into the provided `out` buffer from"]
    #[doc = " `pay`."]
    #[doc = ""]
    #[doc = " @param lfc               LongFi Context."]
    #[doc = " @param pay               Payload you want to send."]
    #[doc = " @param pay_len           Length of `pay`."]
    #[doc = " @param out               Buffer to serialize datagram into."]
    #[doc = " @param[in,out] out_len    in: capacity of `out` buffer.\\n"]
    #[doc = "                          out: actual serialized size of datagram."]
    pub fn lfc_transmit(
        lfc: *mut lfc,
        pay: *const u8,
        pay_len: size_t,
        out: *mut u8,
        out_len: *mut size_t,
    ) -> lfc_res;
}
#[doc = " A successfully parsed datagram."]
#[repr(C)]
pub struct lfc_dg_des {
    #[doc = " Number of corrected bit errors in the header."]
    pub hdr_bit_errs: size_t,
    #[doc = " This datagram's type."]
    #[doc = ""]
    #[doc = " Indicates which member of `u` is valid."]
    pub type_: lfc_dg_type,
    pub __bindgen_anon_1: lfc_dg_des__bindgen_ty_1,
}
#[repr(C)]
pub struct lfc_dg_des__bindgen_ty_1 {
    pub monolithic: __BindgenUnionField<lfc_dg_monolithic>,
    pub frame_start: __BindgenUnionField<lfc_dg_frame_start>,
    pub frame_data: __BindgenUnionField<lfc_dg_frame_data>,
    pub ack: __BindgenUnionField<lfc_dg_ack>,
    pub bindgen_union_field: [u64; 21usize],
}
#[test]
fn bindgen_test_layout_lfc_dg_des__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<lfc_dg_des__bindgen_ty_1>(),
        168usize,
        concat!("Size of: ", stringify!(lfc_dg_des__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<lfc_dg_des__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(lfc_dg_des__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<lfc_dg_des__bindgen_ty_1>())).monolithic as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(lfc_dg_des__bindgen_ty_1),
            "::",
            stringify!(monolithic)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<lfc_dg_des__bindgen_ty_1>())).frame_start as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(lfc_dg_des__bindgen_ty_1),
            "::",
            stringify!(frame_start)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<lfc_dg_des__bindgen_ty_1>())).frame_data as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(lfc_dg_des__bindgen_ty_1),
            "::",
            stringify!(frame_data)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<lfc_dg_des__bindgen_ty_1>())).ack as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(lfc_dg_des__bindgen_ty_1),
            "::",
            stringify!(ack)
        )
    );
}
#[test]
fn bindgen_test_layout_lfc_dg_des() {
    assert_eq!(
        ::core::mem::size_of::<lfc_dg_des>(),
        184usize,
        concat!("Size of: ", stringify!(lfc_dg_des))
    );
    assert_eq!(
        ::core::mem::align_of::<lfc_dg_des>(),
        8usize,
        concat!("Alignment of ", stringify!(lfc_dg_des))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<lfc_dg_des>())).hdr_bit_errs as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(lfc_dg_des),
            "::",
            stringify!(hdr_bit_errs)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<lfc_dg_des>())).type_ as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(lfc_dg_des),
            "::",
            stringify!(type_)
        )
    );
}
extern "C" {
    #[doc = " Parses a received packet."]
    pub fn lfc_dg__des(out: *mut lfc_dg_des, csr: *mut cursor) -> lfc_res;
}
extern "C" {
    #[doc = " Parses a `monolithic` datagram."]
    pub fn lfc_dg_monolithic__des(
        out: *mut lfc_dg_monolithic,
        hdr: lfc_dg_hdr,
        csr: *mut cursor,
    ) -> lfc_res;
}
extern "C" {
    #[doc = " Parses a `ack` datagram."]
    pub fn lfc_dg_ack__des(out: *mut lfc_dg_ack, hdr: lfc_dg_hdr, csr: *mut cursor) -> lfc_res;
}
extern "C" {
    #[doc = " Parses a `frame_start` datagram."]
    pub fn lfc_dg_frame_start__des(
        out: *mut lfc_dg_frame_start,
        hdr: lfc_dg_hdr,
        csr: *mut cursor,
    ) -> lfc_res;
}
extern "C" {
    #[doc = " Parses a `frame_data` datagram."]
    pub fn lfc_dg_frame_data__des(
        out: *mut lfc_dg_frame_data,
        hdr: lfc_dg_hdr,
        csr: *mut cursor,
    ) -> lfc_res;
}
extern "C" {
    #[doc = " Parses a Golay-encoded datagram header."]
    pub fn lfc_dg_hdr__des(out: *mut lfc_dg_hdr, csr: *mut cursor) -> lfc_res;
}
extern "C" {
    pub fn lfc_dg_monolithic_flags__des(flag_bits: u8)
        -> lfc_dg_monolithic_lfc_dg_monolithic_flags;
}
extern "C" {
    pub fn lfc_dg_frame_start_flags__des(
        flag_bits: u8,
    ) -> lfc_dg_frame_start_lfc_dg_frame_start_flags;
}
extern "C" {
    pub fn lfc_dg_frame_data_flags__des(flag_bits: u8)
        -> lfc_dg_frame_data_lfc_dg_frame_data_flags;
}
extern "C" {
    pub fn lfc_dg_ack_flags__des(flag_bits: u8) -> lfc_dg_ack_lfc_dg_ack_flags;
}
extern "C" {
    #[doc = " Serializes a `lfc_dg_monolithic` datagram."]
    pub fn lfc_dg_monolithic__ser(in_: *const lfc_dg_monolithic, csr: *mut cursor) -> lfc_res;
}
extern "C" {
    #[doc = " Serializes a `lfc_dg_frame_start` datagram."]
    pub fn lfc_dg_frame_start__ser(in_: *const lfc_dg_frame_start, csr: *mut cursor) -> lfc_res;
}
extern "C" {
    #[doc = " Serializes a `lfc_dg_frame_data` datagram."]
    pub fn lfc_dg_frame_data__ser(in_: *const lfc_dg_frame_data, csr: *mut cursor) -> lfc_res;
}
extern "C" {
    #[doc = " Serializes a `lfc_dg_ack` datagram."]
    pub fn lfc_dg_ack__ser(in_: *const lfc_dg_ack, csr: *mut cursor) -> lfc_res;
}
extern "C" {
    #[doc = " Serializes monolithic flags into the lower 6 bits of a byte."]
    pub fn lfc_dg_monolithic_flags__ser(
        flags: *const lfc_dg_monolithic_lfc_dg_monolithic_flags,
    ) -> u8;
}
extern "C" {
    #[doc = " Serializes frame start flags into the lower 6 bits of a byte."]
    pub fn lfc_dg_frame_start_flags__ser(
        flags: *const lfc_dg_frame_start_lfc_dg_frame_start_flags,
    ) -> u8;
}
extern "C" {
    #[doc = " Serializes frame data flags into the lower 6 bits of a byte."]
    pub fn lfc_dg_frame_data_flags__ser(
        flags: *const lfc_dg_frame_data_lfc_dg_frame_data_flags,
    ) -> u8;
}
extern "C" {
    #[doc = " Serializes ack flags into the lower 6 bits of a byte."]
    pub fn lfc_dg_ack_flags__ser(flags: *const lfc_dg_ack_lfc_dg_ack_flags) -> u8;
}
